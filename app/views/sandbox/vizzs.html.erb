<div class="column">
	<section>
		<h1>Punchcard</h1>
		<div id="punchcard-<%= SecureRandom.random_number(100) %>" class="punchcard"></div>
		<h1>Pair punchcards</h1>
		<div class="pure-g gutters" style="display: none">
			<div class="pure-u-1 pure-u-md-1-2">
				<div id="punchcard-<%= SecureRandom.random_number(100) %>" class="punchcard"></div>
			</div>
			<div class="pure-u-1 pure-u-md-1-2">
				<div id="punchcard-<%= SecureRandom.random_number(100) %>" class="punchcard"></div>
			</div>
		</div>
	</section>
	<section style="display:none">
		<h1>Rowchart</h1>
		<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
		<h1>Three-in-a-row rowcharts</h1>
		<div class="pure-g gutters">
			<div class="pure-u-1 pure-u-md-1-3">
				<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
			</div>
			<div class="pure-u-1 pure-u-md-1-3">
				<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
			</div>
			<div class="pure-u-1 pure-u-md-1-3">
				<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
			</div>
		</div>
		<h1>Pair rowcharts</h1>
		<div class="pure-g gutters">
			<div class="pure-u-1 pure-u-md-1-2">
				<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
			</div>
			<div class="pure-u-1 pure-u-md-1-2">
				<div id="rowchart-<%= SecureRandom.random_number(100) %>" class="rowchart"></div>
			</div>
		</div>
	</section>
</div>

<!-- Scripting -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script type="text/javascript">
	// Charts
	const rowchart = (context, data, options = {}) => {
		// Markup has already a svg inside
		if ($(`${context} svg`).length !== 0) return

	  // options
	  let itemHeight = options.itemHeight || 25
	  let gutter = options.gutter || 20
	  let margin = options.margins || {
	    top: gutter / 1.5,
	    right: gutter,
	    bottom: gutter * 1.5,
	    left: gutter
	  }
	  let xTickFormat = options.xTickFormat || (d => d)
	  let yTickFormat = options.yTickFormat || (d => d)

	  // dimensions
	  let container = d3.select(context)
	  let width = +container.node().getBoundingClientRect().width - margin.left - margin.right
	  let height = (data.length * itemHeight) + margin.top + margin.bottom
	  let svg = container.append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)

		// tooltip
	  let tooltip = container.append("div")
			.attr("id", `${container.node().id}-tooltip`)
			.attr("class", "graph-tooltip")

	  // scales
	  let x = d3.scaleLinear().range([0, width])
	  let y = d3.scaleBand().range([height, 0])

	  let g = svg.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

	  x.domain([0, d3.max(data, d => d.value)])
	  y.domain(data.map(d => d.key)).padding(0.1)

	  g.append("g")
	    .attr("class", "x axis")
	    .attr("transform", "translate(0," + (height + (gutter / 4)) + ")")
	    .call(d3.axisBottom(x).ticks(5).tickSizeOuter(0).tickFormat(xTickFormat))

	  g.selectAll(".bar")
	    .data(data)
	    .enter()
			.append("a")
			.attr("xlink:href", d => (d.properties || {}).url)
			.append("rect")
			.on("mousemove", function(d) {
				let content = `
					<div class="tooltip-content left">
						${d.value.toLocaleString()}
					</div>`

				tooltip
					.style("opacity", "1")
					.style("left", `${x(d.value) + margin.left }px`)
					.style("top", `${y(d.key) + (itemHeight / 2)}px`)
					.html(content);
			})
			.on("mouseout", d => tooltip.style("opacity", "0"))
	    .attr("class", "bar")
	    .attr("x", 0)
			.attr("y", d => y(d.key))
	    .attr("height", y.bandwidth())
	    .transition()
	    .duration(750)
			.attr("width", d => x(d.value))

	  g.append("g")
	    .attr("class", "y axis")
	    .attr("transform", "translate(" + gutter + ", 0)")
	    .call(d3.axisLeft(y).tickFormat(yTickFormat))
	}

	const punchcard = (context, data, options = {}) => {
		// Markup has already a svg inside
		if ($(`${context} svg`).length !== 0) return

	  // options
	  let itemHeight = options.itemHeight || 50
	  let gutter = options.gutter || 20
	  let margin = options.margins || {
	    top: gutter * 1.5,
	    right: gutter,
	    bottom: gutter * 1.5,
	    left: gutter * 15
	  }
	  let xTickFormat = options.xTickFormat || (d => d)
	  let yTickFormat = options.yTickFormat || (d => d)
	  let title = options.title || ''

	  // parse dates
	  data.forEach((element, elementIndex) => {
	    for (var dateIndex = 0; dateIndex < element.value.length; dateIndex++) {
	      let dateString = element.value[dateIndex].key
	      data[elementIndex].value[dateIndex].key = new Date(dateString)
	    }
	  })

	  // dimensions
	  let container = d3.select(context)
	  let width = +container.node().getBoundingClientRect().width - margin.left - margin.right
	  let height = (data.length * itemHeight) + margin.top + margin.bottom
	  let svg = container.append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)

	  // scales
	  let x = d3.scaleTime().range([0, width]);
	  let y = d3.scalePoint().range([height, 0]);
	  let r = d3.scaleSqrt().range([1, 15]) // tamaÃ±o de las bolas

	  // domains
	  x.domain([
	    d3.min(data.map(d => d3.min(d.value.map(v => v.key)))),
	    d3.max(data.map(d => d3.max(d.value.map(v => v.key))))
	  ]);
	  y.domain(data.map(d => d.key)).padding(1);

	  // chart title
	  if (title) {
	    svg.append("text")
	      .attr("x", 0)
	      .attr("y", (margin.top / 3) + (itemHeight / 2))
	      .attr("class", "title")
	      .attr("text-anchor", "start")
	      .text(title);
	  }

		let g = svg.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")")

		// Custom X-axis
		function xAxis(g) {
			g.call(d3.axisTop(x).ticks(d3.timeMonth.every(1)).tickSizeOuter(0).tickSizeInner(0).tickFormat(xTickFormat))
			g.selectAll(".domain").remove()
			g.selectAll(".tick line")
				.attr("y1", itemHeight / 2)
				.attr("y2", height - (itemHeight / 4))
			g.selectAll(".tick text")
				.attr("y", (-margin.top / 1.5) + (itemHeight / 2))
		}

		// Custom Y-axis
		function yAxis(g) {
			g.call(d3.axisLeft(y).tickSizeOuter(0).tickSizeInner(0).tickFormat(yTickFormat))
			g.selectAll(".domain").remove()
			g.selectAll(".tick")
				.on("click", function (d,i) {
					document.location.href = (data[i].properties || {}).url
				})
		}

		// axis
		g.append("g")
			.attr("class", "x axis")
			.call(xAxis)

		g.append("g")
			.attr("class", "y axis")
			.attr("transform", "translate(" + (-margin.left + gutter) + ",0)")
			.call(yAxis)

		// tooltip
		let tooltip = container.append("div")
			.attr("id", `${container.node().id}-tooltip`)
			.attr("class", "graph-tooltip")

	  // circles
	  for (var i = 0; i < data.length; i++) {

	    svg.append("rect")
	      .attr("x", 0)
	      .attr("y", y(data[i].key) + margin.top - (itemHeight / 2))
	      .attr("rx", 6)
	      .attr("ry", 6)
	      .attr("width", +container.node().getBoundingClientRect().width)
	      .attr("height", itemHeight);

	    let g = svg.append("g")
	      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

	    r.domain([
	      d3.min(data[i].value, d => d.value),
	      d3.max(data[i].value, d => d.value)
	    ]);

	    g.selectAll("circle")
	      .data(data[i].value)
	      .enter()
				.append("a")
				.attr("xlink:href", d => (d.properties || {}).url)
	      .append("circle")
	      .attr("class", "circle")
	      .attr("cx", d => x(d.key))
	      .attr("cy", () => y(data[i].key))
				.on("mousemove", function(d, j, arr) {
					let content = `
						<div class="tooltip-content bottom">
							${d.value.toLocaleString()}
						</div>`

					tooltip
						.style("opacity", "1")
						.style("left", `${x(d.key) + margin.left}px`)
						.style("top", `${d3.select(arr[j]).attr("cy")}px`)
						.html(content);
				})
				.on("mouseout", d => tooltip.style("opacity", "0"))
	      .transition()
	      .duration(800)
	      .attr("r", d => r(d.value));
	  }

	};

	// manage data BEFORE chart call
	$.getJSON("data/rowchart.json", (data) => {

		// preprocess the data
		data.sort((a, b) => a.value - b.value)

		$(".rowchart").each((i, container) => {
	    //rowchart(`#${container.id}`, data)
	  })
	});
	$.getJSON("data/punchcard.json", (data) => {

		// preprocess data sample
		for (var i = 0; i < data.length; i++) {

			// reduce data, group by month
			let nest = d3.nest()
				.key(d => d3.timeMonth((new Date(d.key))))
				.rollup(d => _.sumBy(d, 'value'))
				.entries(data[i].value)
				.map(g => {
					g.key = d3.timeMonth(new Date(d3.timeFormat("%Y/%m/%d")(new Date(g.key))))
					return g
				})

			// update original data
			data[i].value = nest
		}

		// edit options
		let opts = {
			title: 'Reuniones por alto cargo y mes',
			xTickFormat: (d, i, arr) => ((arr.length - i - 1) % 3) ? null : d3.timeFormat("%b %y")(d)
		}

	  $(".punchcard").each((i, container) => {
	    punchcard(`#${container.id}`, data, opts)
	  })
	});
</script>
